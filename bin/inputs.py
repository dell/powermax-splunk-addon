import ta_dellemc_vmax_declare

import os
import sys
import time
import datetime
import json

import modinput_wrapper.base_modinput
from solnlib.packages.splunklib import modularinput as smi



import input_module_inputs as input_module

bin_dir = os.path.basename(__file__)

'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_inputs.py
'''
class ModInputinputs(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputinputs, self).__init__("ta_dellemc_vmax", "inputs", use_single_instance)
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputinputs, self).get_scheme()
        scheme.title = ("Dell EMC VMAX")
        scheme.description = ("Go to the add-on\'s configuration UI and configure modular inputs under the Inputs menu.")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(smi.Argument("u4v_ip_address", title="Unisphere IP Address",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("u4v_port", title="Unisphere Port",
                                         description="Unisphere default port is 8443",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("u4v_username", title="Unisphere Username",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("u4v_password", title="Unisphere Password",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("u4v_vmax_id", title="VMAX Numerical ID",
                                         description="This is the 12-digit array ID",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("enable_ssl", title="Enable SSL",
                                         description="Enable SSL communication between Splunk and Unisphere",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("ssl_cert_location", title="SSL Cert Location",
                                         description="(Optional) Leave this blank if the Unisphere SSL certificate is loaded into the system, otherwise you can specify the direct path to the .pem certificate",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("rest_request_timeout", title="REST Request Timeout (s)",
                                         description="(Optional) Default REST request timeout value, default is 60 seconds, for more information please consult the TA user guide",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_array", title="Array",
                                         description="Collect Array level information",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_alerts", title="Alerts",
                                         description="Collect system & array alerts",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_vmax_only_metrics", title="Collect VMAX only metrics",
                                         description="Select this option to collect only those alerts which relate to the specified VMAX ID, for more information please consult the TA user guide.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_srp", title="Storage Resource Pool",
                                         description="Collect SRP level information",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_sg", title="Storage Group",
                                         description="Collect SG level information",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_director", title="Director",
                                         description="Collect Director level information",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_port", title="Port",
                                         description="Collect Port level information",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_pg", title="Port Group",
                                         description="Collect PG level information",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_host", title="Checkbox",
                                         description="Collect Host level information",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_initiator", title="Initiator",
                                         description="Collect Initiator level information",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("select_wlp", title="Workload Planner",
                                         description="Collect WLP level information",
                                         required_on_create=False,
                                         required_on_edit=False))
        return scheme

    def get_app_name(self):
        return "TA-DellEMC_VMAX"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        checkbox_fields.append("enable_ssl")
        checkbox_fields.append("select_array")
        checkbox_fields.append("select_alerts")
        checkbox_fields.append("select_vmax_only_metrics")
        checkbox_fields.append("select_srp")
        checkbox_fields.append("select_sg")
        checkbox_fields.append("select_director")
        checkbox_fields.append("select_port")
        checkbox_fields.append("select_pg")
        checkbox_fields.append("select_host")
        checkbox_fields.append("select_initiator")
        checkbox_fields.append("select_wlp")
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_name_file = os.path.join(bin_dir, 'global_checkbox_param.json')
            try:
                if os.path.isfile(checkbox_name_file):
                    with open(checkbox_name_file, 'r') as fp:
                        self.global_checkbox_fields = json.load(fp)
                else:
                    self.global_checkbox_fields = []
            except Exception as e:
                self.log_error('Get exception when loading global checkbox parameter names. ' + str(e))
                self.global_checkbox_fields = []
        return self.global_checkbox_fields

if __name__ == "__main__":
    exitcode = ModInputinputs().run(sys.argv)
    sys.exit(exitcode)
